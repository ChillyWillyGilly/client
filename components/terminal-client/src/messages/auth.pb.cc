// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#include "StdInc.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "auth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_auth_2eproto() {
  delete AuthenticateWithKeyMessage::default_instance_;
  delete AuthenticateWithDetailsMessage::default_instance_;
  delete AuthenticateWithTokenMessage::default_instance_;
  delete AuthenticateResultMessage::default_instance_;
  delete AuthenticateUserGroupMessage::default_instance_;
  delete AuthenticateValidateTicketMessage::default_instance_;
  delete AuthenticateValidateTicketResultMessage::default_instance_;
  delete AuthenticateKickUserMessage::default_instance_;
  delete AuthenticateExternalStatusMessage::default_instance_;
  delete AuthenticateRegisterServerMessage::default_instance_;
  delete AuthenticateRegisterServerResultMessage::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_auth_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_auth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  AuthenticateWithKeyMessage::default_instance_ = new AuthenticateWithKeyMessage();
  AuthenticateWithDetailsMessage::default_instance_ = new AuthenticateWithDetailsMessage();
  AuthenticateWithTokenMessage::default_instance_ = new AuthenticateWithTokenMessage();
  AuthenticateResultMessage::default_instance_ = new AuthenticateResultMessage();
  AuthenticateUserGroupMessage::default_instance_ = new AuthenticateUserGroupMessage();
  AuthenticateValidateTicketMessage::default_instance_ = new AuthenticateValidateTicketMessage();
  AuthenticateValidateTicketResultMessage::default_instance_ = new AuthenticateValidateTicketResultMessage();
  AuthenticateKickUserMessage::default_instance_ = new AuthenticateKickUserMessage();
  AuthenticateExternalStatusMessage::default_instance_ = new AuthenticateExternalStatusMessage();
  AuthenticateRegisterServerMessage::default_instance_ = new AuthenticateRegisterServerMessage();
  AuthenticateRegisterServerResultMessage::default_instance_ = new AuthenticateRegisterServerResultMessage();
  AuthenticateWithKeyMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateWithDetailsMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateWithTokenMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateResultMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateUserGroupMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateValidateTicketMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateValidateTicketResultMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateKickUserMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateExternalStatusMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateRegisterServerMessage::default_instance_->InitAsDefaultInstance();
  AuthenticateRegisterServerResultMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_auth_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_auth_2eproto_once_);
void protobuf_AddDesc_auth_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_auth_2eproto_once_,
                 &protobuf_AddDesc_auth_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_auth_2eproto {
  StaticDescriptorInitializer_auth_2eproto() {
    protobuf_AddDesc_auth_2eproto();
  }
} static_descriptor_initializer_auth_2eproto_;
#endif

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateWithKeyMessage::kLicenseKeyFieldNumber;
#endif  // !_MSC_VER

AuthenticateWithKeyMessage::AuthenticateWithKeyMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateWithKeyMessage)
}

void AuthenticateWithKeyMessage::InitAsDefaultInstance() {
}

AuthenticateWithKeyMessage::AuthenticateWithKeyMessage(const AuthenticateWithKeyMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateWithKeyMessage)
}

void AuthenticateWithKeyMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  licensekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateWithKeyMessage::~AuthenticateWithKeyMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateWithKeyMessage)
  SharedDtor();
}

void AuthenticateWithKeyMessage::SharedDtor() {
  licensekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateWithKeyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateWithKeyMessage& AuthenticateWithKeyMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateWithKeyMessage* AuthenticateWithKeyMessage::default_instance_ = NULL;

AuthenticateWithKeyMessage* AuthenticateWithKeyMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateWithKeyMessage* n = new AuthenticateWithKeyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateWithKeyMessage::Clear() {
  if (has_licensekey()) {
    licensekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateWithKeyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateWithKeyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string licenseKey = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_licensekey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateWithKeyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateWithKeyMessage)
  return false;
#undef DO_
}

void AuthenticateWithKeyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateWithKeyMessage)
  // required string licenseKey = 1;
  if (has_licensekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->licensekey(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateWithKeyMessage)
}

int AuthenticateWithKeyMessage::ByteSize() const {
  int total_size = 0;

  // required string licenseKey = 1;
  if (has_licensekey()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->licensekey());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateWithKeyMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateWithKeyMessage*>(&from));
}

void AuthenticateWithKeyMessage::MergeFrom(const AuthenticateWithKeyMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_licensekey()) {
      set_has_licensekey();
      licensekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.licensekey_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateWithKeyMessage::CopyFrom(const AuthenticateWithKeyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateWithKeyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthenticateWithKeyMessage::Swap(AuthenticateWithKeyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateWithKeyMessage::InternalSwap(AuthenticateWithKeyMessage* other) {
  licensekey_.Swap(&other->licensekey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateWithKeyMessage::GetTypeName() const {
  return "AuthenticateWithKeyMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateWithDetailsMessage::kUsernameFieldNumber;
const int AuthenticateWithDetailsMessage::kPasswordFieldNumber;
#endif  // !_MSC_VER

AuthenticateWithDetailsMessage::AuthenticateWithDetailsMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateWithDetailsMessage)
}

void AuthenticateWithDetailsMessage::InitAsDefaultInstance() {
}

AuthenticateWithDetailsMessage::AuthenticateWithDetailsMessage(const AuthenticateWithDetailsMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateWithDetailsMessage)
}

void AuthenticateWithDetailsMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateWithDetailsMessage::~AuthenticateWithDetailsMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateWithDetailsMessage)
  SharedDtor();
}

void AuthenticateWithDetailsMessage::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateWithDetailsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateWithDetailsMessage& AuthenticateWithDetailsMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateWithDetailsMessage* AuthenticateWithDetailsMessage::default_instance_ = NULL;

AuthenticateWithDetailsMessage* AuthenticateWithDetailsMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateWithDetailsMessage* n = new AuthenticateWithDetailsMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateWithDetailsMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateWithDetailsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateWithDetailsMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateWithDetailsMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateWithDetailsMessage)
  return false;
#undef DO_
}

void AuthenticateWithDetailsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateWithDetailsMessage)
  // required string username = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateWithDetailsMessage)
}

int AuthenticateWithDetailsMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_username()) {
    // required string username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
int AuthenticateWithDetailsMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string username = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateWithDetailsMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateWithDetailsMessage*>(&from));
}

void AuthenticateWithDetailsMessage::MergeFrom(const AuthenticateWithDetailsMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateWithDetailsMessage::CopyFrom(const AuthenticateWithDetailsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateWithDetailsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AuthenticateWithDetailsMessage::Swap(AuthenticateWithDetailsMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateWithDetailsMessage::InternalSwap(AuthenticateWithDetailsMessage* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateWithDetailsMessage::GetTypeName() const {
  return "AuthenticateWithDetailsMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateWithTokenMessage::kTokenFieldNumber;
#endif  // !_MSC_VER

AuthenticateWithTokenMessage::AuthenticateWithTokenMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateWithTokenMessage)
}

void AuthenticateWithTokenMessage::InitAsDefaultInstance() {
}

AuthenticateWithTokenMessage::AuthenticateWithTokenMessage(const AuthenticateWithTokenMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateWithTokenMessage)
}

void AuthenticateWithTokenMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateWithTokenMessage::~AuthenticateWithTokenMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateWithTokenMessage)
  SharedDtor();
}

void AuthenticateWithTokenMessage::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateWithTokenMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateWithTokenMessage& AuthenticateWithTokenMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateWithTokenMessage* AuthenticateWithTokenMessage::default_instance_ = NULL;

AuthenticateWithTokenMessage* AuthenticateWithTokenMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateWithTokenMessage* n = new AuthenticateWithTokenMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateWithTokenMessage::Clear() {
  if (has_token()) {
    token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateWithTokenMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateWithTokenMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_token()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateWithTokenMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateWithTokenMessage)
  return false;
#undef DO_
}

void AuthenticateWithTokenMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateWithTokenMessage)
  // required bytes token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->token(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateWithTokenMessage)
}

int AuthenticateWithTokenMessage::ByteSize() const {
  int total_size = 0;

  // required bytes token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->token());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateWithTokenMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateWithTokenMessage*>(&from));
}

void AuthenticateWithTokenMessage::MergeFrom(const AuthenticateWithTokenMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateWithTokenMessage::CopyFrom(const AuthenticateWithTokenMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateWithTokenMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthenticateWithTokenMessage::Swap(AuthenticateWithTokenMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateWithTokenMessage::InternalSwap(AuthenticateWithTokenMessage* other) {
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateWithTokenMessage::GetTypeName() const {
  return "AuthenticateWithTokenMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateResultMessage::kResultFieldNumber;
const int AuthenticateResultMessage::kNpidFieldNumber;
const int AuthenticateResultMessage::kSessionTokenFieldNumber;
#endif  // !_MSC_VER

AuthenticateResultMessage::AuthenticateResultMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateResultMessage)
}

void AuthenticateResultMessage::InitAsDefaultInstance() {
}

AuthenticateResultMessage::AuthenticateResultMessage(const AuthenticateResultMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateResultMessage)
}

void AuthenticateResultMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  npid_ = GOOGLE_ULONGLONG(0);
  sessiontoken_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateResultMessage::~AuthenticateResultMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateResultMessage)
  SharedDtor();
}

void AuthenticateResultMessage::SharedDtor() {
  sessiontoken_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateResultMessage& AuthenticateResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateResultMessage* AuthenticateResultMessage::default_instance_ = NULL;

AuthenticateResultMessage* AuthenticateResultMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateResultMessage* n = new AuthenticateResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateResultMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    result_ = 0;
    npid_ = GOOGLE_ULONGLONG(0);
    if (has_sessiontoken()) {
      sessiontoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_npid;
        break;
      }

      // required fixed64 npid = 2;
      case 2: {
        if (tag == 17) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sessionToken;
        break;
      }

      // required bytes sessionToken = 3;
      case 3: {
        if (tag == 26) {
         parse_sessionToken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessiontoken()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateResultMessage)
  return false;
#undef DO_
}

void AuthenticateResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateResultMessage)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required fixed64 npid = 2;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->npid(), output);
  }

  // required bytes sessionToken = 3;
  if (has_sessiontoken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->sessiontoken(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateResultMessage)
}

int AuthenticateResultMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_result()) {
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  if (has_npid()) {
    // required fixed64 npid = 2;
    total_size += 1 + 8;
  }

  if (has_sessiontoken()) {
    // required bytes sessionToken = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sessiontoken());
  }

  return total_size;
}
int AuthenticateResultMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

    // required fixed64 npid = 2;
    total_size += 1 + 8;

    // required bytes sessionToken = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sessiontoken());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateResultMessage*>(&from));
}

void AuthenticateResultMessage::MergeFrom(const AuthenticateResultMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_sessiontoken()) {
      set_has_sessiontoken();
      sessiontoken_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sessiontoken_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateResultMessage::CopyFrom(const AuthenticateResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthenticateResultMessage::Swap(AuthenticateResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateResultMessage::InternalSwap(AuthenticateResultMessage* other) {
  std::swap(result_, other->result_);
  std::swap(npid_, other->npid_);
  sessiontoken_.Swap(&other->sessiontoken_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateResultMessage::GetTypeName() const {
  return "AuthenticateResultMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateUserGroupMessage::kGroupIDFieldNumber;
#endif  // !_MSC_VER

AuthenticateUserGroupMessage::AuthenticateUserGroupMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateUserGroupMessage)
}

void AuthenticateUserGroupMessage::InitAsDefaultInstance() {
}

AuthenticateUserGroupMessage::AuthenticateUserGroupMessage(const AuthenticateUserGroupMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateUserGroupMessage)
}

void AuthenticateUserGroupMessage::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateUserGroupMessage::~AuthenticateUserGroupMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateUserGroupMessage)
  SharedDtor();
}

void AuthenticateUserGroupMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateUserGroupMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateUserGroupMessage& AuthenticateUserGroupMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateUserGroupMessage* AuthenticateUserGroupMessage::default_instance_ = NULL;

AuthenticateUserGroupMessage* AuthenticateUserGroupMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateUserGroupMessage* n = new AuthenticateUserGroupMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateUserGroupMessage::Clear() {
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateUserGroupMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateUserGroupMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 groupID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateUserGroupMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateUserGroupMessage)
  return false;
#undef DO_
}

void AuthenticateUserGroupMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateUserGroupMessage)
  // required int32 groupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateUserGroupMessage)
}

int AuthenticateUserGroupMessage::ByteSize() const {
  int total_size = 0;

  // required int32 groupID = 1;
  if (has_groupid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateUserGroupMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateUserGroupMessage*>(&from));
}

void AuthenticateUserGroupMessage::MergeFrom(const AuthenticateUserGroupMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateUserGroupMessage::CopyFrom(const AuthenticateUserGroupMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateUserGroupMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthenticateUserGroupMessage::Swap(AuthenticateUserGroupMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateUserGroupMessage::InternalSwap(AuthenticateUserGroupMessage* other) {
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateUserGroupMessage::GetTypeName() const {
  return "AuthenticateUserGroupMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateValidateTicketMessage::kClientIPFieldNumber;
const int AuthenticateValidateTicketMessage::kNpidFieldNumber;
const int AuthenticateValidateTicketMessage::kTicketFieldNumber;
#endif  // !_MSC_VER

AuthenticateValidateTicketMessage::AuthenticateValidateTicketMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateValidateTicketMessage)
}

void AuthenticateValidateTicketMessage::InitAsDefaultInstance() {
}

AuthenticateValidateTicketMessage::AuthenticateValidateTicketMessage(const AuthenticateValidateTicketMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateValidateTicketMessage)
}

void AuthenticateValidateTicketMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientip_ = 0u;
  npid_ = GOOGLE_ULONGLONG(0);
  ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateValidateTicketMessage::~AuthenticateValidateTicketMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateValidateTicketMessage)
  SharedDtor();
}

void AuthenticateValidateTicketMessage::SharedDtor() {
  ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateValidateTicketMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateValidateTicketMessage& AuthenticateValidateTicketMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateValidateTicketMessage* AuthenticateValidateTicketMessage::default_instance_ = NULL;

AuthenticateValidateTicketMessage* AuthenticateValidateTicketMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateValidateTicketMessage* n = new AuthenticateValidateTicketMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateValidateTicketMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    clientip_ = 0u;
    npid_ = GOOGLE_ULONGLONG(0);
    if (has_ticket()) {
      ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateValidateTicketMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateValidateTicketMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 clientIP = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &clientip_)));
          set_has_clientip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_npid;
        break;
      }

      // required fixed64 npid = 2;
      case 2: {
        if (tag == 17) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ticket;
        break;
      }

      // required bytes ticket = 3;
      case 3: {
        if (tag == 26) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateValidateTicketMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateValidateTicketMessage)
  return false;
#undef DO_
}

void AuthenticateValidateTicketMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateValidateTicketMessage)
  // required fixed32 clientIP = 1;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->clientip(), output);
  }

  // required fixed64 npid = 2;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->npid(), output);
  }

  // required bytes ticket = 3;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ticket(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateValidateTicketMessage)
}

int AuthenticateValidateTicketMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_clientip()) {
    // required fixed32 clientIP = 1;
    total_size += 1 + 4;
  }

  if (has_npid()) {
    // required fixed64 npid = 2;
    total_size += 1 + 8;
  }

  if (has_ticket()) {
    // required bytes ticket = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ticket());
  }

  return total_size;
}
int AuthenticateValidateTicketMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed32 clientIP = 1;
    total_size += 1 + 4;

    // required fixed64 npid = 2;
    total_size += 1 + 8;

    // required bytes ticket = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->ticket());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateValidateTicketMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateValidateTicketMessage*>(&from));
}

void AuthenticateValidateTicketMessage::MergeFrom(const AuthenticateValidateTicketMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_ticket()) {
      set_has_ticket();
      ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ticket_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateValidateTicketMessage::CopyFrom(const AuthenticateValidateTicketMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateValidateTicketMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthenticateValidateTicketMessage::Swap(AuthenticateValidateTicketMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateValidateTicketMessage::InternalSwap(AuthenticateValidateTicketMessage* other) {
  std::swap(clientip_, other->clientip_);
  std::swap(npid_, other->npid_);
  ticket_.Swap(&other->ticket_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateValidateTicketMessage::GetTypeName() const {
  return "AuthenticateValidateTicketMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateValidateTicketResultMessage::kResultFieldNumber;
const int AuthenticateValidateTicketResultMessage::kNpidFieldNumber;
const int AuthenticateValidateTicketResultMessage::kGroupIDFieldNumber;
#endif  // !_MSC_VER

AuthenticateValidateTicketResultMessage::AuthenticateValidateTicketResultMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateValidateTicketResultMessage)
}

void AuthenticateValidateTicketResultMessage::InitAsDefaultInstance() {
}

AuthenticateValidateTicketResultMessage::AuthenticateValidateTicketResultMessage(const AuthenticateValidateTicketResultMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateValidateTicketResultMessage)
}

void AuthenticateValidateTicketResultMessage::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  npid_ = GOOGLE_ULONGLONG(0);
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateValidateTicketResultMessage::~AuthenticateValidateTicketResultMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateValidateTicketResultMessage)
  SharedDtor();
}

void AuthenticateValidateTicketResultMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateValidateTicketResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateValidateTicketResultMessage& AuthenticateValidateTicketResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateValidateTicketResultMessage* AuthenticateValidateTicketResultMessage::default_instance_ = NULL;

AuthenticateValidateTicketResultMessage* AuthenticateValidateTicketResultMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateValidateTicketResultMessage* n = new AuthenticateValidateTicketResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateValidateTicketResultMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthenticateValidateTicketResultMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(npid_, groupid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateValidateTicketResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateValidateTicketResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_npid;
        break;
      }

      // required fixed64 npid = 2;
      case 2: {
        if (tag == 17) {
         parse_npid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_groupID;
        break;
      }

      // required int32 groupID = 3;
      case 3: {
        if (tag == 24) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateValidateTicketResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateValidateTicketResultMessage)
  return false;
#undef DO_
}

void AuthenticateValidateTicketResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateValidateTicketResultMessage)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required fixed64 npid = 2;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->npid(), output);
  }

  // required int32 groupID = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateValidateTicketResultMessage)
}

int AuthenticateValidateTicketResultMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_result()) {
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  if (has_npid()) {
    // required fixed64 npid = 2;
    total_size += 1 + 8;
  }

  if (has_groupid()) {
    // required int32 groupID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());
  }

  return total_size;
}
int AuthenticateValidateTicketResultMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

    // required fixed64 npid = 2;
    total_size += 1 + 8;

    // required int32 groupID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->groupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateValidateTicketResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateValidateTicketResultMessage*>(&from));
}

void AuthenticateValidateTicketResultMessage::MergeFrom(const AuthenticateValidateTicketResultMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateValidateTicketResultMessage::CopyFrom(const AuthenticateValidateTicketResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateValidateTicketResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthenticateValidateTicketResultMessage::Swap(AuthenticateValidateTicketResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateValidateTicketResultMessage::InternalSwap(AuthenticateValidateTicketResultMessage* other) {
  std::swap(result_, other->result_);
  std::swap(npid_, other->npid_);
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateValidateTicketResultMessage::GetTypeName() const {
  return "AuthenticateValidateTicketResultMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateKickUserMessage::kNpidFieldNumber;
const int AuthenticateKickUserMessage::kReasonFieldNumber;
const int AuthenticateKickUserMessage::kReasonStringFieldNumber;
#endif  // !_MSC_VER

AuthenticateKickUserMessage::AuthenticateKickUserMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateKickUserMessage)
}

void AuthenticateKickUserMessage::InitAsDefaultInstance() {
}

AuthenticateKickUserMessage::AuthenticateKickUserMessage(const AuthenticateKickUserMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateKickUserMessage)
}

void AuthenticateKickUserMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  npid_ = GOOGLE_ULONGLONG(0);
  reason_ = 0;
  reasonstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateKickUserMessage::~AuthenticateKickUserMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateKickUserMessage)
  SharedDtor();
}

void AuthenticateKickUserMessage::SharedDtor() {
  reasonstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateKickUserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateKickUserMessage& AuthenticateKickUserMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateKickUserMessage* AuthenticateKickUserMessage::default_instance_ = NULL;

AuthenticateKickUserMessage* AuthenticateKickUserMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateKickUserMessage* n = new AuthenticateKickUserMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateKickUserMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    npid_ = GOOGLE_ULONGLONG(0);
    reason_ = 0;
    if (has_reasonstring()) {
      reasonstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateKickUserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateKickUserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed64 npid = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &npid_)));
          set_has_npid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // required int32 reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reasonString;
        break;
      }

      // required string reasonString = 3;
      case 3: {
        if (tag == 26) {
         parse_reasonString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reasonstring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateKickUserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateKickUserMessage)
  return false;
#undef DO_
}

void AuthenticateKickUserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateKickUserMessage)
  // required fixed64 npid = 1;
  if (has_npid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->npid(), output);
  }

  // required int32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  // required string reasonString = 3;
  if (has_reasonstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reasonstring(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateKickUserMessage)
}

int AuthenticateKickUserMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_npid()) {
    // required fixed64 npid = 1;
    total_size += 1 + 8;
  }

  if (has_reason()) {
    // required int32 reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());
  }

  if (has_reasonstring()) {
    // required string reasonString = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reasonstring());
  }

  return total_size;
}
int AuthenticateKickUserMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required fixed64 npid = 1;
    total_size += 1 + 8;

    // required int32 reason = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reason());

    // required string reasonString = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reasonstring());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateKickUserMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateKickUserMessage*>(&from));
}

void AuthenticateKickUserMessage::MergeFrom(const AuthenticateKickUserMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npid()) {
      set_npid(from.npid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_reasonstring()) {
      set_has_reasonstring();
      reasonstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reasonstring_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateKickUserMessage::CopyFrom(const AuthenticateKickUserMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateKickUserMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthenticateKickUserMessage::Swap(AuthenticateKickUserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateKickUserMessage::InternalSwap(AuthenticateKickUserMessage* other) {
  std::swap(npid_, other->npid_);
  std::swap(reason_, other->reason_);
  reasonstring_.Swap(&other->reasonstring_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateKickUserMessage::GetTypeName() const {
  return "AuthenticateKickUserMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateExternalStatusMessage::kStatusFieldNumber;
#endif  // !_MSC_VER

AuthenticateExternalStatusMessage::AuthenticateExternalStatusMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateExternalStatusMessage)
}

void AuthenticateExternalStatusMessage::InitAsDefaultInstance() {
}

AuthenticateExternalStatusMessage::AuthenticateExternalStatusMessage(const AuthenticateExternalStatusMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateExternalStatusMessage)
}

void AuthenticateExternalStatusMessage::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateExternalStatusMessage::~AuthenticateExternalStatusMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateExternalStatusMessage)
  SharedDtor();
}

void AuthenticateExternalStatusMessage::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateExternalStatusMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateExternalStatusMessage& AuthenticateExternalStatusMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateExternalStatusMessage* AuthenticateExternalStatusMessage::default_instance_ = NULL;

AuthenticateExternalStatusMessage* AuthenticateExternalStatusMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateExternalStatusMessage* n = new AuthenticateExternalStatusMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateExternalStatusMessage::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateExternalStatusMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateExternalStatusMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateExternalStatusMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateExternalStatusMessage)
  return false;
#undef DO_
}

void AuthenticateExternalStatusMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateExternalStatusMessage)
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateExternalStatusMessage)
}

int AuthenticateExternalStatusMessage::ByteSize() const {
  int total_size = 0;

  // required int32 status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateExternalStatusMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateExternalStatusMessage*>(&from));
}

void AuthenticateExternalStatusMessage::MergeFrom(const AuthenticateExternalStatusMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateExternalStatusMessage::CopyFrom(const AuthenticateExternalStatusMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateExternalStatusMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AuthenticateExternalStatusMessage::Swap(AuthenticateExternalStatusMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateExternalStatusMessage::InternalSwap(AuthenticateExternalStatusMessage* other) {
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateExternalStatusMessage::GetTypeName() const {
  return "AuthenticateExternalStatusMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateRegisterServerMessage::kConfigPathFieldNumber;
#endif  // !_MSC_VER

AuthenticateRegisterServerMessage::AuthenticateRegisterServerMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateRegisterServerMessage)
}

void AuthenticateRegisterServerMessage::InitAsDefaultInstance() {
}

AuthenticateRegisterServerMessage::AuthenticateRegisterServerMessage(const AuthenticateRegisterServerMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateRegisterServerMessage)
}

void AuthenticateRegisterServerMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  configpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateRegisterServerMessage::~AuthenticateRegisterServerMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateRegisterServerMessage)
  SharedDtor();
}

void AuthenticateRegisterServerMessage::SharedDtor() {
  configpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateRegisterServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateRegisterServerMessage& AuthenticateRegisterServerMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateRegisterServerMessage* AuthenticateRegisterServerMessage::default_instance_ = NULL;

AuthenticateRegisterServerMessage* AuthenticateRegisterServerMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateRegisterServerMessage* n = new AuthenticateRegisterServerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRegisterServerMessage::Clear() {
  if (has_configpath()) {
    configpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateRegisterServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateRegisterServerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string configPath = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configpath()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateRegisterServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateRegisterServerMessage)
  return false;
#undef DO_
}

void AuthenticateRegisterServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateRegisterServerMessage)
  // optional string configPath = 1;
  if (has_configpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->configpath(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateRegisterServerMessage)
}

int AuthenticateRegisterServerMessage::ByteSize() const {
  int total_size = 0;

  // optional string configPath = 1;
  if (has_configpath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->configpath());
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRegisterServerMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateRegisterServerMessage*>(&from));
}

void AuthenticateRegisterServerMessage::MergeFrom(const AuthenticateRegisterServerMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_configpath()) {
      set_has_configpath();
      configpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configpath_);
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateRegisterServerMessage::CopyFrom(const AuthenticateRegisterServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateRegisterServerMessage::IsInitialized() const {

  return true;
}

void AuthenticateRegisterServerMessage::Swap(AuthenticateRegisterServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRegisterServerMessage::InternalSwap(AuthenticateRegisterServerMessage* other) {
  configpath_.Swap(&other->configpath_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateRegisterServerMessage::GetTypeName() const {
  return "AuthenticateRegisterServerMessage";
}


// ===================================================================

#ifndef _MSC_VER
const int AuthenticateRegisterServerResultMessage::kResultFieldNumber;
const int AuthenticateRegisterServerResultMessage::kLicenseKeyFieldNumber;
const int AuthenticateRegisterServerResultMessage::kServerIDFieldNumber;
#endif  // !_MSC_VER

AuthenticateRegisterServerResultMessage::AuthenticateRegisterServerResultMessage()
  : ::google::protobuf::MessageLite() , _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AuthenticateRegisterServerResultMessage)
}

void AuthenticateRegisterServerResultMessage::InitAsDefaultInstance() {
}

AuthenticateRegisterServerResultMessage::AuthenticateRegisterServerResultMessage(const AuthenticateRegisterServerResultMessage& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AuthenticateRegisterServerResultMessage)
}

void AuthenticateRegisterServerResultMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = 0;
  licensekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthenticateRegisterServerResultMessage::~AuthenticateRegisterServerResultMessage() {
  // @@protoc_insertion_point(destructor:AuthenticateRegisterServerResultMessage)
  SharedDtor();
}

void AuthenticateRegisterServerResultMessage::SharedDtor() {
  licensekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AuthenticateRegisterServerResultMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AuthenticateRegisterServerResultMessage& AuthenticateRegisterServerResultMessage::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_auth_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_auth_2eproto();
#endif
  return *default_instance_;
}

AuthenticateRegisterServerResultMessage* AuthenticateRegisterServerResultMessage::default_instance_ = NULL;

AuthenticateRegisterServerResultMessage* AuthenticateRegisterServerResultMessage::New(::google::protobuf::Arena* arena) const {
  AuthenticateRegisterServerResultMessage* n = new AuthenticateRegisterServerResultMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AuthenticateRegisterServerResultMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthenticateRegisterServerResultMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(result_, serverid_);
    if (has_licensekey()) {
      licensekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->clear();
}

bool AuthenticateRegisterServerResultMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::StringOutputStream unknown_fields_string(
      mutable_unknown_fields());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string);
  // @@protoc_insertion_point(parse_start:AuthenticateRegisterServerResultMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_licenseKey;
        break;
      }

      // required string licenseKey = 2;
      case 2: {
        if (tag == 18) {
         parse_licenseKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_licensekey()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_serverID;
        break;
      }

      // required int32 serverID = 3;
      case 3: {
        if (tag == 24) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AuthenticateRegisterServerResultMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AuthenticateRegisterServerResultMessage)
  return false;
#undef DO_
}

void AuthenticateRegisterServerResultMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AuthenticateRegisterServerResultMessage)
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required string licenseKey = 2;
  if (has_licensekey()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->licensekey(), output);
  }

  // required int32 serverID = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   unknown_fields().size());
  // @@protoc_insertion_point(serialize_end:AuthenticateRegisterServerResultMessage)
}

int AuthenticateRegisterServerResultMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_result()) {
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  if (has_licensekey()) {
    // required string licenseKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->licensekey());
  }

  if (has_serverid()) {
    // required int32 serverID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());
  }

  return total_size;
}
int AuthenticateRegisterServerResultMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 result = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

    // required string licenseKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->licensekey());

    // required int32 serverID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->serverid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthenticateRegisterServerResultMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthenticateRegisterServerResultMessage*>(&from));
}

void AuthenticateRegisterServerResultMessage::MergeFrom(const AuthenticateRegisterServerResultMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_licensekey()) {
      set_has_licensekey();
      licensekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.licensekey_);
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->append(from.unknown_fields());
}

void AuthenticateRegisterServerResultMessage::CopyFrom(const AuthenticateRegisterServerResultMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticateRegisterServerResultMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AuthenticateRegisterServerResultMessage::Swap(AuthenticateRegisterServerResultMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthenticateRegisterServerResultMessage::InternalSwap(AuthenticateRegisterServerResultMessage* other) {
  std::swap(result_, other->result_);
  licensekey_.Swap(&other->licensekey_);
  std::swap(serverid_, other->serverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.swap(other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AuthenticateRegisterServerResultMessage::GetTypeName() const {
  return "AuthenticateRegisterServerResultMessage";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
